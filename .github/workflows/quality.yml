# このワークフローは自動テストを実行します
# PRマージ前にテストを実行し、品質を自動検証します
# コメントは日本語で記載しています。
name: Python CI - Tests

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    # PostgreSQLサービスコンテナを追加
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: stock_user
          POSTGRES_PASSWORD: stock_password
          POSTGRES_DB: stock_data_system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # 1. テスト環境のセットアップ
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        # 依存パッケージのインストール（本番環境用 + 開発用）
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # 2. データベースのセットアップ
      - name: Set up database schema
        # PostgreSQLサービスコンテナにテーブルとスキーマを作成
        env:
          PGPASSWORD: stock_password
        run: |
          # データベース接続確認
          psql -h localhost -U stock_user -d stock_data_system -c "SELECT version();"

          # テーブル作成スクリプト実行
          psql -h localhost -U stock_user -d stock_data_system -f scripts/database/schema/create_tables.sql

          # サンプルデータ挿入
          psql -h localhost -U stock_user -d stock_data_system -f scripts/database/seed/insert_sample_data.sql

          # スキーマ作成確認
          psql -h localhost -U stock_user -d stock_data_system -c "\dt"

      # 3. テストの実行
      - name: Run tests (excluding E2E)
        # E2Eテストを除く全テストを実行（ユニット・統合テスト両方）
        env:
          # 実際のデータベース接続情報
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: stock_user
          DB_PASSWORD: stock_password
          DB_NAME: stock_data_system
        run: |
          pytest -m "not e2e" --verbosity=1 --maxfail=1 --cov=app --cov-report=xml --cov-report=term --cov-fail-under=70

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

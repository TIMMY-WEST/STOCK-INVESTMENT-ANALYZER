[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stock-investment-analyzer"
version = "1.0.0"
description = "Stock Investment Analyzer - Yahoo Financeから株価データを取得・分析"
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "Flask==3.0.0",
    "SQLAlchemy==2.0.23",
    "psycopg2-binary==2.9.9",
    "yfinance==0.2.66",
    "python-dotenv==1.0.0",
    "pytest==7.4.3",
    "selenium==4.15.2",
    "webdriver-manager==4.0.1",
    "APScheduler==3.10.4",
    "pandas>=2.2.0",
    "flask-socketio==5.3.5",
    "python-socketio==5.10.0",
    "waitress==3.0.0",
    "eventlet==0.36.1",
    "xlrd>=2.0.1",
    "openpyxl>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
]

# ===== Black Configuration =====
[tool.black]
line-length = 79
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # デフォルトの除外に加えて以下を除外
  | migrations
  | venv
  | \.venv
  | \.git
  | \.pytest_cache
  | __pycache__
  | build
  | dist
  | \.eggs
)/
'''

# ===== isort Configuration =====
[tool.isort]
profile = "black"
line_length = 79
# インポートの順序
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
# 各セクション間に1行の空行を挿入
lines_after_imports = 2
# from import の順序
force_sort_within_sections = true
# 1行に複数のimportを許可しない
force_single_line = false
# importの長さに応じて自動的に折り返し
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
# 除外ディレクトリ
skip_glob = ["venv/*", ".venv/*", "migrations/*", "build/*", "dist/*"]
# 既知のローカルモジュール
known_first_party = ["app", "models", "services", "utils", "tests"]

# ===== Flake8 Configuration =====
# Note: flake8は.flake8ファイルまたはsetup.cfgで設定する必要があります
# pyproject.tomlをサポートしていないため、.flake8ファイルを別途作成します

# ===== Pylint Configuration =====
[tool.pylint.main]
# 並列実行数（0=自動）
jobs = 0
# 除外ディレクトリ
ignore = ["venv", ".venv", "migrations", "build", "dist", ".git"]
# 除外パターン
ignore-patterns = ["^\\.#", "test_.*\\.py$"]

[tool.pylint.messages_control]
# 無効化するメッセージ
disable = [
    "C0111",  # missing-docstring（docstringがない場合の警告を無効化）
    "C0103",  # invalid-name（短い変数名などの警告を無効化）
    "R0903",  # too-few-public-methods（メソッドが少ないクラスの警告を無効化）
    "W0212",  # protected-access（protectedメンバーアクセスの警告を無効化）
]

[tool.pylint.format]
# 最大行長
max-line-length = 79
# インデント
indent-string = "    "
# 1行あたりの最大文字数（docstring、コメント用）
max-module-lines = 1000

[tool.pylint.basic]
# 良い変数名のパターン
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]
# 定数の命名規則
const-rgx = "[A-Z_][A-Z0-9_]*"
# クラスの命名規則
class-rgx = "[A-Z][a-zA-Z0-9]+"
# 関数の命名規則
function-rgx = "[a-z_][a-z0-9_]*"
# メソッドの命名規則
method-rgx = "[a-z_][a-z0-9_]*"
# 変数の命名規則
variable-rgx = "[a-z_][a-z0-9_]*"

[tool.pylint.design]
# 最大引数数
max-args = 7
# 最大ローカル変数数
max-locals = 20
# 最大戻り値数
max-returns = 6
# 最大分岐数
max-branches = 15
# 最大文数
max-statements = 60

[tool.pylint.imports]
# 外部依存関係の確認を無効化
allow-any-import-level = true

# ===== Mypy Configuration =====
[tool.mypy]
python_version = "3.12"
# Phase 3: 段階的な厳格化 (Issue #137)
# 基本的な型チェックを有効化し、段階的に厳格化していく方針
warn_return_any = false  # 将来的に有効化予定
warn_unused_configs = true
disallow_untyped_defs = false  # 将来的に有効化予定
disallow_incomplete_defs = false  # 将来的に有効化予定
check_untyped_defs = false  # 現時点では緩い設定
no_implicit_optional = false  # 将来的に有効化予定
warn_redundant_casts = true  # 有効化
warn_unused_ignores = true  # 有効化
warn_no_return = true  # 有効化
warn_unreachable = true  # 有効化
strict_optional = false  # 将来的に有効化予定
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
# 段階的な型チェック有効化のため、現時点では緩い設定
allow_untyped_defs = true
allow_incomplete_defs = true
ignore_errors = false

# SQLAlchemy mypyプラグインを有効化
plugins = ["sqlalchemy.ext.mypy.plugin"]

# プロジェクトルートとappディレクトリをmypy_pathに追加してインポートを解決
# Note: Windowsでは;、Unix系では:を使用
mypy_path = "app"
namespace_packages = true
explicit_package_bases = true

# 除外ディレクトリ
exclude = [
    "venv",
    ".venv",
    "migrations",
    "build",
    "dist",
]

# サードパーティライブラリの型スタブがない場合のエラーを無視
[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "selenium.*",
    "webdriver_manager.*",
    "eventlet.*",
    "flask_socketio.*",
    "pandas.*",
    "openpyxl.*",
    "xlrd.*",
    "dotenv.*",
    "APScheduler.*",
    "apscheduler.*",
    "waitress.*",
]
ignore_missing_imports = true

# 内部モジュールの循環インポート問題を一時的に無視
# Phase 1: 型エラー分析のため一時的にコメントアウト
# [[tool.mypy.overrides]]
# module = [
#     "app.*",
#     "models",
#     "models.*",
#     "services",
#     "services.*",
#     "utils",
#     "utils.*",
#     "api",
#     "api.*",
# ]
# ignore_errors = true

# ===== Pytest Configuration =====
[tool.pytest.ini_options]
# テストディレクトリとファイルパターン
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# マーカー定義
markers = [
    "unit: Unit tests - 単体テスト（外部依存なし）",
    "integration: Integration tests - 結合テスト（DB/API連携）",
    "e2e: End-to-End tests - E2Eテスト（ブラウザ操作）",
    "slow: Slow running tests - 実行時間の長いテスト",
]

# デフォルトオプション
addopts = [
    "--strict-markers",           # 未定義マーカーの使用を禁止
    "--verbose",                  # 詳細出力
    "--tb=short",                 # トレースバックを短く表示
    "--cov=app",                  # appディレクトリのカバレッジ測定
    "--cov=models",               # modelsのカバレッジ測定
    "--cov=services",             # servicesディレクトリのカバレッジ測定
    "--cov=utils",                # utilsディレクトリのカバレッジ測定
    "--cov-report=term-missing",  # カバレッジレポート（ターミナル）
    "--cov-report=html",          # カバレッジレポート（HTML）
    "--cov-fail-under=70",        # 最低カバレッジ率70%
]

# ログ設定
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# 警告フィルター
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnknownMarkWarning",
]

# タイムアウト設定（デフォルト300秒）
timeout = 300

# 並列実行時の設定
# pytest-xdistを使用する場合は -n auto オプションで実行

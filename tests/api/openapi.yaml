openapi: 3.0.3
info:
  title: Stock Investment Analyzer API
  description: |
    株式投資分析システムのAPI仕様書

    このAPIは、株式データの取得、分析、管理機能を提供します。
  version: "1.0.0"
  contact:
    name: Stock Investment Analyzer Team
    email: support@stock-analyzer.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://127.0.0.1:8000/api
    description: 開発環境

tags:
  - name: 株価データ
    description: 株価データ関連のAPI
  - name: バルクデータ
    description: バルクデータ処理関連のAPI
  - name: 銘柄マスター
    description: 銘柄マスター関連のAPI
  - name: システム監視
    description: システム監視関連のAPI

paths:
  /api/stocks:
    get:
      tags:
        - 株価データ
      summary: 株式データ一覧取得
      description: 株式データの一覧を取得します
      parameters:
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/stocks/{stock_id}:
    get:
      tags:
        - 株価データ
      summary: 株式データ詳細取得
      description: 指定された銘柄の詳細データを取得します
      parameters:
        - name: stock_id
          in: path
          required: true
          description: 銘柄ID
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        '404':
          description: 銘柄が見つかりません
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/fetch-data:
    post:
      tags:
        - 株価データ
      summary: 株式データ取得
      description: 外部APIから株式データを取得します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_codes:
                  type: array
                  items:
                    type: string
                  description: 取得する銘柄コードのリスト
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/bulk-data/jobs:
    post:
      tags:
        - バルクデータ
      summary: バルクデータジョブ作成
      description: バルクデータ処理ジョブを作成します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_type:
                  type: string
                  description: ジョブタイプ
                parameters:
                  type: object
                  description: ジョブパラメータ
      responses:
        '201':
          description: ジョブ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkJob'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/bulk-data/jobs/{job_id}:
    get:
      tags:
        - バルクデータ
      summary: バルクデータジョブ詳細取得
      description: 指定されたジョブの詳細情報を取得します
      parameters:
        - name: job_id
          in: path
          required: true
          description: ジョブID
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkJob'
        '404':
          description: ジョブが見つかりません
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/stock-master/stocks:
    get:
      tags:
        - 銘柄マスター
      summary: 銘柄マスター一覧取得
      description: 銘柄マスターデータの一覧を取得します
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockMaster'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/system/health-check:
    get:
      tags:
        - システム監視
      summary: ヘルスチェック
      description: システムの稼働状況を確認します
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/system/database/connection:
    get:
      tags:
        - システム監視
      summary: データベース接続確認
      description: データベースへの接続状況を確認します
      responses:
        '200':
          description: 接続正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: connected
                  database:
                    type: string
                    example: postgresql
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/system/external-api/connection:
    get:
      tags:
        - システム監視
      summary: 外部API接続確認
      description: 外部APIへの接続状況を確認します
      responses:
        '200':
          description: 接続正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: connected
                  apis:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        status:
                          type: string
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/v1/system/health-check:
    get:
      tags:
        - システム監視
      summary: ヘルスチェック(v1)
      description: バージョン付きのシステムの稼働状況を確認します
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: システム異常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unhealthy
                  timestamp:
                    type: string
                    format: date-time

components:
  responses:
    Success:
      description: 成功レスポンス
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
    BadRequest:
      description: 不正なリクエスト
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: 内部サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailable:
      description: サービス利用不可
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    Stock:
      type: object
      properties:
        stock_id:
          type: string
          description: 銘柄ID
          example: "1234"
        stock_code:
          type: string
          description: 銘柄コード
          example: "1234"
        stock_name:
          type: string
          description: 銘柄名
          example: "サンプル株式会社"
        market:
          type: string
          description: 市場
          example: "東証プライム"
        sector:
          type: string
          description: セクター
          example: "情報・通信業"
        price:
          type: number
          format: float
          description: 株価
          example: 1500.50
        volume:
          type: integer
          description: 出来高
          example: 100000
        timestamp:
          type: string
          format: date-time
          description: データ取得日時

    StockData:
      type: object
      properties:
        stock_code:
          type: string
          description: 銘柄コード
        date:
          type: string
          format: date
          description: 日付
        open_price:
          type: number
          format: float
          description: 始値
        high_price:
          type: number
          format: float
          description: 高値
        low_price:
          type: number
          format: float
          description: 安値
        close_price:
          type: number
          format: float
          description: 終値
        volume:
          type: integer
          description: 出来高

    StockMaster:
      type: object
      properties:
        stock_code:
          type: string
          description: 銘柄コード
        stock_name:
          type: string
          description: 銘柄名
        market:
          type: string
          description: 市場
        sector:
          type: string
          description: セクター
        industry:
          type: string
          description: 業種
        listing_date:
          type: string
          format: date
          description: 上場日

    BulkJob:
      type: object
      properties:
        job_id:
          type: string
          description: ジョブID
          example: "job_123456"
        job_type:
          type: string
          description: ジョブタイプ
          example: "data_import"
        status:
          type: string
          description: ジョブステータス
          enum: ["pending", "running", "completed", "failed"]
          example: "running"
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        parameters:
          type: object
          description: ジョブパラメータ
        result:
          type: object
          description: ジョブ実行結果

    BulkJobStatus:
      type: object
      properties:
        job_id:
          type: string
          description: ジョブID
        status:
          type: string
          enum: ["pending", "running", "completed", "failed"]
          description: ジョブステータス
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: 進捗率（%）

    APIResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["success", "error"]
          description: レスポンスステータス
        message:
          type: string
          description: メッセージ
        data:
          type: object
          description: レスポンスデータ

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          description: エラーメッセージ
        error:
          type: object
          properties:
            code:
              type: string
              description: エラーコード
            message:
              type: string
              description: 詳細エラーメッセージ

    PaginatedResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 現在のページ番号
          example: 1
        limit:
          type: integer
          description: 1ページあたりの件数
          example: 20
        total:
          type: integer
          description: 総件数
          example: 100
        total_pages:
          type: integer
          description: 総ページ数
          example: 5

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: APIキー認証

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer認証

security:
  - ApiKeyAuth: []
  - BearerAuth: []
